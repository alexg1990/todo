{"version":3,"sources":["ListItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","state","isCompleted","handleClick","bind","event","preventDefault","this","setState","ListStyle","textDecoration","style","onClick","item","className","removeItem","React","Component","Center","textAlign","margin","App","input","toDoList","handleChange","addItem","target","value","includes","filter","el","map","key","onChange","type","listStyleType","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAuBeA,G,iBAnBb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACXC,aAAa,GAEf,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALD,E,yEAORC,GACVA,EAAMC,iBACNC,KAAKC,SAAS,CAACN,aAAcK,KAAKN,MAAMC,gB,+BAIxC,OADAK,KAAKN,MAAMC,YAAcK,KAAKE,UAAY,CAACC,eAAgB,gBAAkBH,KAAKE,UAAY,CAACC,eAAiB,QAE9G,wBAAIC,MAAOJ,KAAKE,UAAWG,QAASL,KAAKJ,aAAcI,KAAKP,MAAMa,KAAK,4BAASC,UAAU,eAAeF,QAASL,KAAKP,MAAMe,YAAtD,oB,GAftDC,IAAMC,YCCvBC,EAAS,CACbC,UAAW,SACXC,OAAQ,UA0CKC,E,YAtCb,WAAarB,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACXqB,MAAO,GACPC,SAAU,IAEZ,EAAKC,aAAe,EAAKA,aAAapB,KAAlB,gBACpB,EAAKqB,QAAU,EAAKA,QAAQrB,KAAb,gBAPG,E,0EASPC,GACXE,KAAKC,SAAS,CAACc,MAAOjB,EAAMqB,OAAOC,U,8BAE7BtB,GACNA,EAAMC,iBACNC,KAAKC,UAAS,SAAAP,GAAK,MAAqB,KAAhBA,EAAMqB,QAAiBrB,EAAMsB,SAASK,SAAS3B,EAAMqB,QAAU,CAACC,SAAS,GAAD,mBAAMtB,EAAMsB,UAAZ,CAAsBtB,EAAMqB,c,iCAEnHT,EAAMR,GACfA,EAAMC,iBACNC,KAAKC,UAAS,SAAAP,GAAK,MAAK,CAACsB,SAAUtB,EAAMsB,SAASM,QAAO,SAAAC,GAAE,OAAIA,IAAOjB,W,+BAE9D,IAAD,OACDU,EAAWhB,KAAKN,MAAMsB,SAASQ,KAAI,SAAAlB,GAAI,OAAI,kBAAC,EAAD,CAAUmB,IAAKnB,EAAMA,KAAMA,EAAME,WAAY,EAAKA,WAAWX,KAAK,EAAMS,QACzH,OACE,yBAAKF,MAAOO,GACV,yDACA,8BACE,2BAAOe,SAAU1B,KAAKiB,eAEtB,4BAAQV,UAAU,eAAeF,QAASL,KAAKkB,QAASS,KAAK,UAA7D,YACA,wBAAIvB,MAAO,CAACwB,cAAc,SACvBZ,S,GA/BKP,IAAMC,WCGJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7f6990df.chunk.js","sourcesContent":["import React from 'react';\nimport './CSS/App.css';\n\nclass ListItem extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      isCompleted: false\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick(event) {\n    event.preventDefault();\n    this.setState({isCompleted: !this.state.isCompleted});\n  }\n  render() {\n    this.state.isCompleted ? this.ListStyle = {textDecoration: \"line-through\"} : this.ListStyle = {textDecoration:  \"none\"};\n    return (\n      <li style={this.ListStyle} onClick={this.handleClick}>{this.props.item}<button  className=\"ButtonRemove\" onClick={this.props.removeItem}>Delete Item</button></li>\n    )\n  }\n}\n\nexport default ListItem;\n","import React from 'react';\nimport ListItem from './ListItem'\nimport './CSS/App.css';\n\nconst Center = {\n  textAlign: \"center\",\n  margin: \"0 auto\"\n}\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      input: '',\n      toDoList: []\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.addItem = this.addItem.bind(this);\n  }\n  handleChange(event) {\n    this.setState({input: event.target.value})\n  }\n  addItem(event) {\n    event.preventDefault();\n    this.setState(state => (state.input !== '' && !state.toDoList.includes(state.input) && {toDoList: [...state.toDoList, state.input]}));\n  }\n  removeItem(item, event) {\n    event.preventDefault();\n    this.setState(state => ({toDoList: state.toDoList.filter(el => el !== item)}));\n  }\n  render() {\n    const toDoList = this.state.toDoList.map(item => <ListItem key={item} item={item} removeItem={this.removeItem.bind(this, item)}/>);\n    return (\n      <div style={Center}>\n        <h1>Create your own ToDo-List</h1>\n        <form>\n          <input onChange={this.handleChange}>\n          </input>\n          <button className=\"ButtonSubmit\" onClick={this.addItem} type=\"submit\">Add Item</button>\n          <ul style={{listStyleType:\"none\"}}>\n            {toDoList}\n          </ul>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}